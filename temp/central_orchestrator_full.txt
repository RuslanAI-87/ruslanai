# central_orchestrator.py - ??????????? ?????? ? ???????????? ?????????????
import os
import logging
import json
import subprocess
import webbrowser
import sys
import requests
import shutil
import psutil
import tempfile
from typing import Dict, Any, List, Optional, Union
from datetime import datetime
import time

# ????????? ???????????
os.makedirs("C:/RuslanAI/logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="C:/RuslanAI/logs/central_agent.log"
)
logger = logging.getLogger(__name__)

# ???????? ??????????? ??????? ??? ?????? ? ????????
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
console_handler.setFormatter(console_formatter)
logger.addHandler(console_handler)

# ?????? ????????? LangChain
try:
    from langchain_openai import ChatOpenAI
    from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
    from langchain.memory import ConversationBufferMemory
    from langchain_core.messages import HumanMessage, AIMessage
    langchain_available = True
    logger.info("LangChain ??????? ????????????")
except ImportError as e:
    logger.error(f"?????? ??????? LangChain: {e}")
    langchain_available = False

# ??? ??????? ? SEO-?????????
sys.path.append("C:/RuslanAI/agents/seo_analyst")
try:
    from seo_analyst import analyze_url
    logger.info("SEO-???????? ??????? ????????????")
    seo_analyst_available = True
except ImportError as e:
    logger.error(f"?????? ??????? SEO-?????????: {e}")
    seo_analyst_available = False

# ??? ??????? ? ???????
sys.path.append("C:/RuslanAI/agents/critic")
try:
    from critic_agent import CriticAgent
    logger.info("?????-?????? ??????? ????????????")
    critic_available = True
except ImportError as e:
    logger.error(f"?????? ??????? ??????-???????: {e}")
    critic_available = False

# ????????? API ?????
OPENAI_API_KEY = "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"

# ????????? ??? ?????? ? ???????? ????????
BASE_DIR = "C:/"
SCRIPTS_DIR = "C:/RuslanAI/scripts"
if not os.path.exists(SCRIPTS_DIR):
    os.makedirs(SCRIPTS_DIR, exist_ok=True)

# ????? ??? ???????????? ??????? ??????? ? ?????????
class UsageTracker:
    def __init__(self):
        self.input_tokens = 0
        self.output_tokens = 0
        self.model = "gpt-4o"
        self.start_time = None
        self.end_time = None
        self.rates = {
            "gpt-3.5-turbo": {"input": 0.0015, "output": 0.002},  # $ per 1K tokens
            "gpt-4o": {"input": 0.01, "output": 0.03}             # $ per 1K tokens
        }
        
    def start_tracking(self):
        self.start_time = datetime.now()
        
    def end_tracking(self):
        self.end_time = datetime.now()
        
    def add_usage(self, input_tokens, output_tokens):
        self.input_tokens += input_tokens
        self.output_tokens += output_tokens
        
    def calculate_cost(self):
        rates = self.rates.get(self.model, self.rates["gpt-4o"])
        input_cost = (self.input_tokens / 1000) * rates["input"]
        output_cost = (self.output_tokens / 1000) * rates["output"]
        total_cost = input_cost + output_cost
        return {
            "input_tokens": self.input_tokens,
            "output_tokens": self.output_tokens,
            "input_cost": round(input_cost, 4),
            "output_cost": round(output_cost, 4),
            "total_cost": round(total_cost, 4),
            "currency": "USD"
        }
        
    def get_duration(self):
        if not self.start_time:
            return "?? ??????"
        end = self.end_time or datetime.now()
        duration = end - self.start_time
        return str(duration).split('.')[0]  # ?????? HH:MM:SS
        
    def get_status_report(self):
        cost_info = self.calculate_cost()
        duration = self.get_duration()
        return {
            "duration": duration,
            "tokens": {
                "input": self.input_tokens,
                "output": self.output_tokens,
                "total": self.input_tokens + self.output_tokens
            },
            "cost": cost_info
        }

# ??????? ??? ??????????? ???????? ???????
def log_action(action_type, details, result=None):
    """??????????? ???????? ? ????????? ???? ??? ????????????"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # ??????? ?????????? ??? ?????, ???? ?? ???
    log_dir = "C:/RuslanAI/logs/actions"
    os.makedirs(log_dir, exist_ok=True)
    
    # ??? ????? ????? ???????? ????
    log_file = os.path.join(log_dir, f"actions_{datetime.now().strftime('%Y-%m-%d')}.log")
    
    # ????????? ?????? ????
    log_entry = {
        "timestamp": timestamp,
        "action": action_type,
        "details": details,
        "result": result
    }
    
    # ?????????? ? ????
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
    
    # ????? ?????????? ? ????? ??????
    logger.info(f"????????: {action_type} - {details}")

# ????? ???????????? ??????-????????????
class CentralOrchestrator:
    def __init__(self, api_key=OPENAI_API_KEY):
        self.api_key = api_key
        
        if langchain_available:
            self.llm = ChatOpenAI(model="gpt-4o", temperature=0, api_key=api_key)
            self.memory = ConversationBufferMemory(return_messages=True)
        else:
            logger.warning("LangChain ??????????, ????? ??????????? ?????????? ?????")
        
        # ????????????? ???????, ???? ????????
        self.critic = None
        if critic_available:
            self.critic = CriticAgent(api_key)
            logger.info("?????-?????? ???????????????")
        
        # ??????????? ????????? ????????????
        self.specialists = {}
        self._register_specialists()
        
        # ???????? ??????? ???????
        self.usage_tracker = UsageTracker()
        
        # ??????????? ?????????? ??????? ? ???????????? ?????????????
        self.system_prompt = """
        ?? - ??????????? ????? ??????? RuslanAI, ??????? ???????????? ?????? ????????? ?????????????????? ??????????? 
        ? ???????? ????????????? ?????????? ????????? ??????.
        
        ???? ???????? ???????:
        1. ?????? ???????? ???????????? ? ????????? ?????
        2. ?????????? ????????? ?????? ? ????????
        3. ?????????? ???????? ???????? ? ????????????? ?????
        4. ??????????? ?????? ????? ????????????? ? ???????-????????
        5. ?????????????? ???????????? ????????????? ? ????????? ???????????
        
        ????????? ???????????:
        {specialists}
        
        ???? ????????? ??????????? ????????:
        - ?????? shell-?????? ????? subprocess
        - ???????? ? ?????????? Python-????????
        - ?????? ? ???????? ???????? (??????, ??????, ??????????? ??????)
        - ?????? ????????
        - ???????? ?????? ?? ?????????
        - ???????? URL ? ????????
        - ?????????? ????????? ?????????
        
        ????? ???????????? ??????????? ?????????? ??????:
        1. ??????? ????? ????????, ? ??? ??????? ??????
        2. ???? ????? ???????????? ????????? ???????????, ????? ???? ????????
        3. ????????, ??? ????? ????????? ??????, ? ?????? ??????
        4. ??????? ??????????? ????????, ????????? ?????? ??????
        5. ?????????? ???????? ? ?????????? ???????????? ? ???????????
        
        ???? ???? ???????????????, ?? ??????????. ???? ???? - ?????? ???????????? ?????????? ?????? ??? ??????.
        """
        
        # ???????? ?????????? ??? ????? ? ????????
        os.makedirs("C:/RuslanAI/logs", exist_ok=True)
        os.makedirs("C:/RuslanAI/scripts", exist_ok=True)
        
        logger.info("??????????? ??????????? ??????????????? ???????")
        
    def _register_specialists(self):
        """??????????? ????????? ????????????"""
        if seo_analyst_available:
            self.specialists["seo_analyst"] = {
                "name": "SEO-????????",
                "description": "??????????? ???-????? ?? ??????? SEO-???????????, ?????????? ???????????? ?? ?????????",
                "capabilities": ["?????? ????-?????", "???????? ????????? URL", "????? ????????", "?????? ???????? ????"],
                "function": analyze_url
            }
            
    def get_specialists_info(self):
        """????????? ?????????? ? ????????? ???????????? ? ??????? ??? ???????"""
        info = []
        for key, spec in self.specialists.items():
            capabilities = ", ".join(spec["capabilities"])
            info.append(f"- {spec['name']}: {spec['description']}. ???????????: {capabilities}")
        
        if not info:
            return "? ?????? ?????? ??? ????????? ????????????."
        return "\n".join(info)
    
    # === ????? ?????? ??? ????????? ???????? ===
    
    def execute_shell_command(self, command):
        """?????????? shell-??????? ? ??????? ??????????"""
        try:
            log_action("shell_command", command)
            result = subprocess.run(command, shell=True, capture_output=True, text=True, encoding='utf-8')
            
            log_entry = {
                "stdout": result.stdout,
                "stderr": result.stderr,
                "returncode": result.returncode
            }
            log_action("shell_result", command, log_entry)
            
            return {
                "result": result.stdout,
                "error": result.stderr,
                "returncode": result.returncode,
                "usage": self.usage_tracker.get_status_report()
            }
        except Exception as e:
            error_message = f"?????? ??? ?????????? ???????: {str(e)}"
            log_action("shell_error", command, error_message)
            return {
                "error": error_message,
                "usage": self.usage_tracker.get_status_report()
            }
    
    def list_files(self, path=None):
        """????????? ?????? ?????? ? ??????????"""
        try:
            target_path = path or BASE_DIR
            log_action("list_files", target_path)
            
            files = os.listdir(target_path)
            file_info = []
            
            for file in files:
                full_path = os.path.join(target_path, file)
                try:
                    stat_info = os.stat(full_path)
                    is_dir = os.path.isdir(full_path)
                    file_info.append({
                        "name": file,
                        "path": full_path,
                        "size": stat_info.st_size,
                        "modified": datetime.fromtimestamp(stat_info.st_mtime).strftime("%Y-%m-%d %H:%M:%S"),
                        "type": "directory" if is_dir else "file"
                    })
                except Exception as e:
                    logger.warning(f"?????? ??? ????????? ?????????? ? ????? {full_path}: {e}")
                    file_info.append({
                        "name": file,
                        "path": full_path,
                        "error": str(e)
                    })
            
            return {
                "files": file_info,
                "directory": target_path,
                "usage": self.usage_tracker.get_status_report()
            }
        except Exception as e:
            error_message = f"?????? ??? ????????? ?????? ??????: {str(e)}"
            log_action("list_files_error", path, error_message)
            return {
                "error": error_message,
                "usage": self.usage_tracker.get_status_report()
            }
    
    def read_file(self, path):
        """?????? ??????????? ?????"""
        try:
            log_action("read_file", path)
            
            with open(path, "r", encoding="utf-8") as f:
                content = f.read()
            
            return {
                "content": content,
                "path": path,
                "size": len(content),
                "usage": self.usage_tracker.get_status_report()
            }
        except UnicodeDecodeError:
            # ??????? ??????? ? ???????? ?????? ??? ??????????? ??????
            try:
                with open(path, "rb") as f:
                    content = f.read()
                return {
                    "content": "???????? ??????????, ?????????? ?????????? ? ????????? ????",
                    "path": path,
                    "size": len(content),
                    "binary": True,
                    "usage": self.usage_tracker.get_status_report()
                }
            except Exception as e:
                error_message = f"?????? ??? ?????? ????????? ?????: {str(e)}"
                log_action("read_file_error", path, error_message)
                return {
                    "error": error_message,
                    "usage": self.usage_tracker.get_status_report()
                }
        except Exception as e:
            error_message = f"?????? ??? ?????? ?????: {str(e)}"
            log_action("read_file_error", path, error_message)
            return {
                "error": error_message,
                "usage": self.usage_tracker.get_status_report()
            }
    
    def write_file(self, path, content=None):
        """?????? ??????????? ? ????"""
        try:
            log_action("write_file", path)
            
            with open(path, "w", encoding="utf-8") as f:
                f.write(content or "")
            
            return {
                "result": f"???? {path} ??????? ???????",
                "path": path,
                "size": len(content or ""),
                "usage": self.usage_tracker.get_status_report()
            }
        except Exception as e:
            error_message = f"?????? ??? ?????? ?????: {str(e)}"
            log_action("write_file_error", path, error_message)
            return {
                "error": error_message,
                "usage": self.usage_tracker.get_status_report()
            }
    
    def run_program(self, program_path, args=None):
        """?????? ????????? ? ???????????"""
        try:
            cmd = [program_path]
            if args:
                if isinstance(args, list):
                    cmd.extend(args)
                else:
                    cmd.append(args)
            
            log_action("run_program", program_path, args)
            
            process = subprocess.Popen(cmd)
            
            return {
                "result": f"????????? {program_path} ???????? ? PID {process.pid}",
                "pid": process.pid,
                "usage": self.usage_tracker.get_status_report()
            }
        except Exception as e:
            error_message = f"?????? ??? ??????? ?????????: {str(e)}"
            log_action("run_program_error", program_path, error_message)
            return {
                "error": error_message,
                "usage": self.usage_tracker.get_status_report()
            }
    
    def download_file(self, url, destination=None):
        """???????? ????? ?? URL"""
        try:
            log_action("download_file", url, destination)
            
            if not destination:
                destination = os.path.join(tempfile.gettempdir(), os.path.basename(url))
            
            response = requests.get(url, stream=True)
            response.raise_for_status()
            
            with open(destination, "wb") as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            return {
                "result": f"???? ??????? ???????? ? {destination}",
                "path": destination,
                "size": os.path.getsize(destination),
                "usage": self.usage_tracker.get_status_report()
            }
        except Exception as e:
            error_message = f"?????? ??? ???????? ?????: {str(e)}"
            log_action("download_file_error", url, error_message)
            return {
                "error": error_message,
                "usage": self.usage_tracker.get_status_report()
            }
    
    def open_in_browser(self, url):
        """???????? URL ? ????????"""
        try:
            log_action("open_browser", url)
            
            webbrowser.open(url)
            
            return {
                "result": f"URL {url} ?????? ? ????????",
                "url": url,
                "usage": self.usage_tracker.get_status_report()
            }
        except Exception as e:
            error_message = f"?????? ??? ???????? URL: {str(e)}"
            log_action("open_browser_error", url, error_message)
            return {
                "error": error_message,
                "usage": self.usage_tracker.get_status_report()
            }
    
    def get_process_list(self):
        """????????? ?????? ?????????? ?????????"""
        try:
            log_action("process_list", "?????? ?????? ?????????")
            
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'username', 'cpu_percent', 'memory_percent']):
                try:
                    processes.append(proc.info)
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    pass
            
            return {
                "processes": processes,
                "count": len(processes),
                "usage": self.usage_tracker.get_status_report()
            }
        except Exception as e:
            error_message = f"?????? ??? ????????? ?????? ?????????: {str(e)}"
            log_action("process_list_error", "", error_message)
            return {
                "error": error_message,
                "usage": self.usage_tracker.get_status_report()
            }
    
    def create_and_run_script(self, script_content, script_type="python", args=None):
        """???????? ? ?????? ???????"""
        try:
            # ??????? ?????????? ??? ?????
            timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
            
            if script_type.lower() == "python":
                script_path = os.path.join(SCRIPTS_DIR, f"script_{timestamp}.py")
                run_cmd = ["python", script_path]
            elif script_type.lower() == "powershell":
                script_path = os.path.join(SCRIPTS_DIR, f"script_{timestamp}.ps1")
                run_cmd = ["powershell", "-ExecutionPolicy", "Bypass", "-File", script_path]
            elif script_type.lower() == "batch" or script_type.lower() == "cmd":
                script_path = os.path.join(SCRIPTS_DIR, f"script_{timestamp}.bat")
                run_cmd = [script_path]
            else:
                return {
                    "error": f"???????????????? ??? ???????: {script_type}",
                    "usage": self.usage_tracker.get_status_report()
                }
            
            # ????????? ?????????, ???? ??? ????
            if args:
                if isinstance(args, list):
                    run_cmd.extend(args)
                else:
                    run_cmd.append(args)
            
            # ?????????? ?????? ? ????
            log_action("create_script", script_path, script_type)
            with open(script_path, "w", encoding="utf-8") as f:
                f.write(script_content)
            
            # ????????? ??????
            log_action("run_script", script_path, run_cmd)
            result = subprocess.run(run_cmd, capture_output=True, text=True, encoding='utf-8')
            
            log_entry = {
                "stdout": result.stdout,
                "stderr": result.stderr,
                "returncode": result.returncode
            }
            log_action("script_result", script_path, log_entry)
            
            return {
                "result": "?????? ????????",
                "script_path": script_path,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "returncode": result.returncode,
                "usage": self.usage_tracker.get_status_report()
            }
        except Exception as e:
            error_message = f"?????? ??? ????????/??????? ???????: {str(e)}"
            log_action("script_error", script_type, error_message)
            return {
                "error": error_message,
                "usage": self.usage_tracker.get_status_report()
            }
    
    def execute_python_code(self, code):
        """?????????? ????????????? Python-????"""
        try:
            log_action("execute_python", code[:100] + ("..." if len(code) > 100 else ""))
            
            # ??????? ????????? ???? ??? ?????????? ????
            timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
            temp_file = os.path.join(SCRIPTS_DIR, f"exec_{timestamp}.py")
            
            with open(temp_file, "w", encoding="utf-8") as f:
                f.write(code)
            
            # ????????? ??? ??? ????????? ??????? ??? ????????????
            result = subprocess.run(["python", temp_file], capture_output=True, text=True, encoding='utf-8')
            
            log_entry = {
                "stdout": result.stdout,
                "stderr": result.stderr,
                "returncode": result.returncode
            }
            log_action("python_exec_result", temp_file, log_entry)
            
            return {
                "result": "??? ????????",
                "script_path": temp_file,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "returncode": result.returncode,
                "usage": self.usage_tracker.get_status_report()
            }
        except Exception as e:
            error_message = f"?????? ??? ?????????? Python-????: {str(e)}"
            log_action("python_exec_error", "", error_message)
            return {
                "error": error_message,
                "usage": self.usage_tracker.get_status_report()
            }
    
    # === ???????? ?????? ??? ?????? ? ???????? ===
    
    def start_session(self, user_request):
        """?????? ????? ?????? ? ?????????????"""
        # ????? ??????? ?????????????
        self.usage_tracker = UsageTracker()
        self.usage_tracker.start_tracking()
        
        # ????????, ???????? ?? LangChain
        if not langchain_available:
            return self._fallback_response(user_request)
        
        # ???????????? ??????? ? ?????? ????????? ????????????
        specialists_info = self.get_specialists_info()
        prompt = ChatPromptTemplate.from_messages([
            ("system", self.system_prompt.format(specialists=specialists_info)),
            MessagesPlaceholder(variable_name="history"),
            ("human", "{input}")
        ])
        
        # ???????? ???????
        chain = prompt | self.llm
        
        # ?????? ???????
        response = chain.invoke({
            "history": self.memory.chat_memory.messages,
            "input": user_request
        })
        
        # ?????????? ? ??????
        self.memory.chat_memory.add_user_message(user_request)
        self.memory.chat_memory.add_ai_message(response.content)
        
        # ?????? ????????????? ???????
        input_tokens = len(user_request.split()) * 1.3  # ????????? ??????
        output_tokens = len(response.content.split()) * 1.3
        self.usage_tracker.add_usage(int(input_tokens), int(output_tokens))
        
        return {
            "response": response.content,
            "usage": self.usage_tracker.get_status_report()
        }
        
    def continue_conversation(self, user_message):
        """??????????? ???????????? ??????"""
        # ????????, ???????? ?? LangChain
        if not langchain_available:
            return self._fallback_response(user_message)
        
        prompt = ChatPromptTemplate.from_messages([
            ("system", self.system_prompt.format(specialists=self.get_specialists_info())),
            MessagesPlaceholder(variable_name="history"),
            ("human", "{input}")
        ])
        
        chain = prompt | self.llm
        
        response = chain.invoke({
            "history": self.memory.chat_memory.messages,
            "input": user_message
        })
        
        # ?????????? ? ??????
        self.memory.chat_memory.add_user_message(user_message)
        self.memory.chat_memory.add_ai_message(response.content)
        
        # ?????? ????????????? ???????
        input_tokens = len(user_message.split()) * 1.3
        output_tokens = len(response.content.split()) * 1.3
        self.usage_tracker.add_usage(int(input_tokens), int(output_tokens))
        
        return {
            "response": response.content,
            "usage": self.usage_tracker.get_status_report()
        }
    
    def _fallback_response(self, user_message):
        """???????? ??????? ??????, ???? LangChain ??????????"""
        response = "? ?? ???? ?????????? ??? ?????? ??-?? ??????? ? LangChain. ??????????, ????????? ????????? ?????????."
        return {
            "response": response,
            "error": "LangChain ??????????",
            "usage": self.usage_tracker.get_status_report()
        }
        
    def execute_seo_task(self, url, task_description=None):
        """?????????? SEO-???????"""
        if "seo_analyst" not in self.specialists:
            return {
                "error": "SEO-???????? ??????????",
                "usage": self.usage_tracker.get_status_report()
            }
        
        if task_description is None:
            task_description = f"??????? SEO-????? ????? {url} ? ???????? ???????????? ?? ?????????"
            
        # ???????? ??????????? ID ??? ??????
        task_id = f"seo_{datetime.now().strftime('%Y%m%d%H%M%S')}"
            
        try:
            # ????????? ??????? ???????
            analyze_function = self.specialists["seo_analyst"]["function"]
            
            # ?????? ???????
            start_time = time.time()
            result = analyze_function(url)
            end_time = time.time()
            
            # ?????? ????????????? ??????? (?????????)
            input_tokens = 1000  # ????????? ??????
            output_tokens = len(str(result).split()) * 1.3
            self.usage_tracker.add_usage(int(input_tokens), int(output_tokens))
            
            # ???? ?????? ????????, ????????? ?????????
            if self.critic:
                logger.info(f"???????? ?????????? SEO-??????? ?? ???????? ???????")
                critique = self.critic.evaluate(task_description, result, "SEO-????????", task_id)
                
                # ???? ????????? ????????? ? ??? ?? ????????? ????????
                if critique.get("needs_revision", False) and not self.critic.is_final_iteration(task_id):
                    # ????? ? ??????? ????? ???????? ?????? ????????? ??????????
                    # ?????? ?????? ????????? ?????????? ? ???????
                    result = result + "\n\n--- ???????????? ??????? ---\n" + json.dumps(critique, ensure_ascii=False, indent=2)
                
                return {
                    "result": result,
                    "specialist": "seo_analyst",
                    "execution_time": f"{round(end_time - start_time, 2)} ???",
                    "critique": critique,
                    "usage": self.usage_tracker.get_status_report()
                }
            else:
                # ???? ?????? ??????????, ?????????? ????????? ??? ????
                return {
                    "result": result,
                    "specialist": "seo_analyst",
                    "execution_time": f"{round(end_time - start_time, 2)} ???",
                    "usage": self.usage_tracker.get_status_report()
                }
        except Exception as e:
            logger.error(f"?????? ??? ?????????? SEO-???????: {e}")
            return {
                "error": f"?????? ??? ?????????? SEO-???????: {str(e)}",
                "usage": self.usage_tracker.get_status_report()
            }
            
    def end_session(self):
        """?????????? ?????? ? ????????? ????????? ??????????"""
        self.usage_tracker.end_tracking()
        return {
            "final_usage": self.usage_tracker.get_status_report(),
            "messages_count": len(self.memory.chat_memory.messages) // 2 if langchain_available else 0,
            "session_summary": "?????? ????????? ???????."
        }

# ?????????? ????????? ????????????
orchestrator = None

# ??????? ??? ????????????? ? API
def handle_request(request_type, content, specialist=None, **kwargs):
    """
    ????????? ???????? ? ???????????? ??????
    
    Args:
        request_type: ??? ??????? ('start', 'continue', 'execute_seo', 'shell', 'python', etc.)
        content: ?????????? ???????
        specialist: ???? ??????????? (??? execute)
        **kwargs: ?????????????? ????????? ??? ????????? ????? ????????
        
    Returns:
        ????????? ????????? ???????
    """
    global orchestrator
    
    if orchestrator is None:
        orchestrator = CentralOrchestrator()
        
    if request_type == "start":
        return orchestrator.start_session(content)
    elif request_type == "continue":
        return orchestrator.continue_conversation(content)
    elif request_type == "execute_seo":
        return orchestrator.execute_seo_task(content)
    elif request_type == "shell":
        return orchestrator.execute_shell_command(content)
    elif request_type == "list_files":
        path = content if content else None
        return orchestrator.list_files(path)
    elif request_type == "read_file":
        return orchestrator.read_file(content)
    elif request_type == "write_file":
        return orchestrator.write_file(content, kwargs.get("file_content", ""))
    elif request_type == "run_program":
        return orchestrator.run_program(content, kwargs.get("args", None))
    elif request_type == "download_file":
        return orchestrator.download_file(content, kwargs.get("destination", None))
    elif request_type == "open_browser":
        return orchestrator.open_in_browser(content)
    elif request_type == "process_list":
        return orchestrator.get_process_list()
    elif request_type == "create_script":
        return orchestrator.create_and_run_script(
            content,
            kwargs.get("script_type", "python"),
            kwargs.get("args", None)
        )
    elif request_type == "python":
        return orchestrator.execute_python_code(content)
    elif request_type == "end":
        return orchestrator.end_session()
    else:
        return {"error": f"??????????? ??? ???????: {request_type}"}

# ???????? ???????
def test_orchestrator():
    print("???????????? ???????????? ??????-????????????...")
    
    agent = CentralOrchestrator()
    
    # ???? ?????? ??????
    print("\n=== ?????? ?????? ===")
    response = agent.start_session("??????! ??? ?? ?????? ???????")
    print(f"?????: {response['response']}")
    print(f"?????????? ?????????????: {response['usage']}")
    
    # ???? ??????????? ??????
    print("\n=== ??????????? ?????? ===")
    response = agent.continue_conversation("?????? ?? ?? ????????? ????????? ????????")
    print(f"?????: {response['response']}")
    print(f"?????????? ?????????????: {response['usage']}")
    
    # ???? ?????????? shell-???????
    print("\n=== ?????????? shell-??????? ===")
    response = agent.execute_shell_command("dir")
    print(f"?????????: {response.get('result', '')[:100]}...")
    
    # ???? ?????? ?????
    print("\n=== ?????? ????? ===")
    try:
        # ??????? ???????? ????
        with open("test_file.txt", "w", encoding="utf-8") as f:
            f.write("???????? ??????? ??? ??????")
        
        response = agent.read_file("test_file.txt")
        print(f"??????????: {response.get('content', '')}")
    except Exception as e:
        print(f"?????? ??? ???????????? ?????? ?????: {e}")
    finally:
        # ??????? ???????? ????
        try:
            os.remove("test_file.txt")
        except:
            pass
    
    # ???? ???????? ? ??????? ???????
    print("\n=== ???????? ? ?????? ??????? ===")
    script_content = """
print("?????? ?? ????????? ???????!")
import os
print(f"??????? ??????????: {os.getcwd()}")
"""
    response = agent.create_and_run_script(script_content)
    print(f"Stdout: {response.get('stdout', '')}")
    
    # ?????????? ??????
    print("\n=== ?????????? ?????? ===")
    final_stats = agent.end_session()
    print(f"???????? ??????????: {final_stats}")
    
    return "???????????? ?????????"

if __name__ == "__main__":
    test_orchestrator()
